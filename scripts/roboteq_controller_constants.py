RUNTIME_COMMANDS = {
  'AC': (['motor_channel', 'acceleration'], 'Set Acceleration'),
  'AX': (['motor_channel', 'acceleration'], 'Next Acceleration'),
  'B': (['variable_number', 'binary_state'], 'Set User Boolean Variable'),
  'BND': ([], 'Spektrum Radio Bind'),
  'C': (['motor_channel', 'count'], 'Set Encoder Count'),
  'CB': (['motor_channel', 'count'], 'Set Brushless Count'),
  'CS': (['frame_element', 'value'], 'CAN Send\n1 = header\n2 = bytecount\n3 to 10 = data0 to data7'),
  'D0': (['output_number'], 'Reset Individual Digital Out bits'),
  'D1': (['output_number'], 'Set Individual Digital Out bits'),
  'DC': (['motor_channel', 'decceleration'], 'Set Deceleration'),
  'DS': (['value'], 'Set all Digital Out bits\nvalue can be from 0-255 and corresponds to a bit pattern for all the digital outputs'),
  'DX': (['decceleration'], 'Next Deceleration'),
  'EES': ([], 'Save Configuration in EEPROM'),
  'EX': ([], 'Emergency Stop'),
  'G': (['motor_channel', 'value'], 'Go to Speed or to Relative Position'),
  'H': (['motor_channel'], 'Load Home Counter'),
  'MG': ([], 'Emergency Stop Release'),
  'MS': (['motor_channel'], 'Stop in All Modes'),
  'P': (['motor_channel', 'absolute_count'], 'Go to Absolute Desired Position'),
  'PR': (['motor_channel', 'relative_count'], 'Go to Relative Desired Position'),
  'PRX': (['motor_channel', 'relative_count'], 'Next Go to Relative Desired Position'),
  'PX': (['motor_channel', 'absolute_count'], 'Next Go to Absolute Desired Position'),
  'R': (['mode'], 'MicroBasic Run'),
  'S': (['motor_channel', 'rpm'], 'Motor Position-Mode Velocity'),
  'SX': (['motor_channel', 'rpm'], 'Next Velocity'),
  'VAR': (['variable_number', 'value'], 'Set User Integer Variable'),
}

RUNTIME_QUERIES = {
  'A': (['motor_channel'], 'Motor Amps'),
  'AI': (['analog_input_number'], 'Analog Inputs'),
  'AIC': ([], 'Analog Input after Conversion'),
  'B': (['boolean_number'], 'User Boolean Variable'),
  'BA': (['motor_channel'], 'Battery Amps'),
  'BS': ([], 'BL Motor Speed in RPM'),
  'BSR': ([], 'BL Motor Speed as 1/1000 of Max'),
  'C': (['motor_channel'], 'Absolute Encoder Count'),
  'CAN': (['frame_element'], 'Raw CAN Frame\n1 = header\n2 = bytecount\n3 to 10 = data0 to data7'),
  'CB': ([], 'Absolute Brushless Counter'),
  'CBR': ([], 'Brushless Count Relative'),
  'CF': ([], 'Raw CAN Received Frame Count'),
  'CIA': ([], 'Internal Analog Command'),
  'CIP': ([], 'Internal Pulse Command'),
  'CIS': ([], 'Internal Serial Command'),
  'CR': (['motor_channel'], 'Encoder Count Relative'),
  'D': ([], 'All Digital Inputs'),
  'DI': (['input_number'], 'Individual Digital Inputs'),
  'DO': ([], 'Current Digital Outputs'),
  'DR': ([], 'Destination Reached'),
  'E': ([], 'Closed Loop Error'),
  'F': ([], 'Feedback'),
  'FF': ([], 'Fault Flags'),
  'FID': ([], 'Firmware ID String'),
  'FM': (['channel'], 'Runtime Status of Each Motor'),
  'FS': ([], 'Status Flags'),
  'K': (['radio_channel'], 'Spektrum Receiver'),
  'LK': ([], 'Lock Status'),
  'M': (['motor_channel'], 'Motor Command Applied'),
  'MA': (['sensor_number'], 'MEMS Accelerometers'),
  'MGD': ([], 'Magsensor Track Detect'),
  'MGM': (['channel'], 'Magsensor Markers'),
  'MGS': ([], 'Magsensor Status'),
  'MGT': (['channel'], 'Magsensor Track Position'),
  'P': (['motor_channel'], 'Applied Power Level'),
  'PI': (['ic_channel'], 'Pulse Input (Input Capture)'),
  'PIC': ([], 'Pulse Input after Conversion'),
  'S': (['motor_channel'], 'Encoder Motor Speed in RPM'),
  'SR': (['motor__channel'], 'Encoder Motor Speed as 1/1000 of Max'),
  'T': (['motor_channel'], 'Case & Internal Temperatures'),
  'TM': ([], 'Time'),
  'TR': (['motor_channel'], 'Position Relative Tracking'),
  'TRN': ([], 'Power Unit Tree filename'),
  'V': (['motor_channel'], 'Internal Voltages'),
  'VAR': (['variable_number'], 'User Variable'),
}
